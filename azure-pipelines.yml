# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

resources:
  repositories: 
  - repository: Weight-tracker-ansible-pipeline
    type: github
    name: sincros121/Weight-tracker-ansible-pipeline
    ref: main
    endpoint: sincros121


        # - task: NodeTool@0
    #   inputs:
    #     versionSpec: '14.x'
    #   displayName: 'Install Node.js'

trigger:
- master

pool: 'self-hosted-stas'

stages:
- stage: CI
  displayName: Build
  
  jobs:
  - job: Build
    displayName: Build artifacts

    steps:
    - checkout: self
      displayName: Clone latest web-application repo

    # - task: Npm@0
    #   displayName: 'npm install'
    #   inputs:
    #     cwd: '$(System.DefaultWorkingDirectory)'
    #     command: 'install'

    - task: Npm@0
      displayName: 'npm install'
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'
        command: 'install'
        # arguments: '-save-dev nodemon@2'
      
    # - task: DeleteFiles@1
    #   displayName: Delete non artifact files
    #   inputs:
    #     SourceFolder: '$(System.DefaultWorkingDirectory)'
    #     Contents: |
    #       README.md
    #       .git
    #       docs
    #       .gitignore
    #       LICENSE
    #       azure-pipelines.yml
          
    # - task: ArchiveFiles@2
    #   displayName: Archive files
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/bootcamp-app.zip'
    #     replaceExistingArchive: true
    #     sevenZipCompression: none
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourceDirectory)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true

    # - task: PublishPipelineArtifact@1
    #   displayName: Publish artifacts
    #   inputs:
    #     targetPath: '$(Pipeline.Workspace)'
    #     artifactName: 'drop'
    #     artifactType: 'pipeline'
    #     parallel: false
      


    - task: UniversalPackages@0
      displayName: Upload artifacts to azure artifacts
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '4d568cd9-3258-4c66-8828-30f40b885ad4/fa3b70db-aad3-42de-a3b2-a6d319553542'
        vstsFeedPackagePublish: 'weight_tracker'
        versionOption: 'patch'



- stage: CD_stage
  displayName: Stage
  
  variables: 
  - group: vault secrets - stage

  jobs:
  - deployment: Deploy
    environment: stage
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: Weight-tracker-ansible-pipeline
            displayName: Clone latest ansible repo
          
          - task: UniversalPackages@0
            displayName: Download latest artifacts
            inputs:
              command: 'download'
              downloadDirectory: '$(System.DefaultWorkingDirectory)'
              feedsToUse: 'internal'
              vstsFeed: '4d568cd9-3258-4c66-8828-30f40b885ad4/fa3b70db-aad3-42de-a3b2-a6d319553542'
              vstsFeedPackage: 'abb22cc3-69e3-448e-bcb0-4091eee52c00'
              vstsPackageVersion: '*'

          - script: |
              echo "
              PORT=8080
              HOST=0.0.0.0

              #postgres
              PGHOST=weight-tracker-postgresql-db-$(Environment.Name).postgres.database.azure.com
              PGUSERNAME=postgres
              PGDATABASE=postgres
              PGPASSWORD=$(weight-tracker-PSQL-db-password)
              PGPORT=5432

              HOST_URL=http://0.0.0.0:8080
              COOKIE_ENCRYPT_PWD=$(cookie-encrypt-pwd)
              NODE_ENV=development

              # Okta configuration
              OKTA_ORG_URL=https://dev-77800982.okta.com
              OKTA_CLIENT_ID=$(OKTA-client-ID-stage)
              OKTA_CLIENT_SECRET=$(okta-client-secret-stage)" | cat > .env
            displayName: Crate .env file


          # - task: Ansible@0
          #   displayName: Deploy using ansible
          #   inputs:
          #     ansibleInterface: 'agentMachine'
          #     playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/deploy.yaml'
          #     inventoriesAgentMachine: 'noInventory'
          #     args: '-e "env=$(Environment.Name) admin_password=$(VM-password)"'
          #     failOnStdErr: false

          # - task: DeleteFiles@1
          #   displayName: Delete .env file
          #   inputs:
          #     SourceFolder: '$(System.DefaultWorkingDirectory)'
          #     Contents: '.env'
  







# - stage: CD_stage
#   displayName: Stage
  
#   variables: 
#   - group: vault secrets - prod

#   jobs:
#   - job: Build
#     displayName: Build
    
        # - task: NodeTool@0
    #   inputs:
    #     versionSpec: '14.x'
    #   displayName: 'Install Node.js'


    # - script: |
    #     echo "
    #     PORT=8080
    #     HOST=0.0.0.0

    #     #postgres
    #     PGHOST=${PGHOST}
    #     PGUSERNAME=postgres
    #     PGDATABASE=postgres
    #     PGPASSWORD=${PGPASSWORD}
    #     PGPORT=5432

    #     HOST_URL=http://${HOST_URL_IP}:8080
    #     COOKIE_ENCRYPT_PWD=${COOKIE_ENCRYPT_PWD}
    #     NODE_ENV=development

    #     # Okta configuration
    #     OKTA_ORG_URL=https://dev-77800982.okta.com
    #     OKTA_CLIENT_ID=${OKTA-client-ID}
    #     OKTA_CLIENT_SECRET=${OKTA_CLIENT_SECRET}" | cat > .env
    #   displayName: '.Env creation'


    # - script: |
    #     npm install
    #     npm run build
    #   displayName: 'npm install and build'