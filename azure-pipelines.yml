# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

resources:
  repositories: 
  - repository: Weight-tracker-ansible-pipeline
    type: github
    name: sincros121/Weight-tracker-ansible-pipeline
    ref: main
    endpoint: sincros121


        # - task: NodeTool@0
    #   inputs:
    #     versionSpec: '14.x'
    #   displayName: 'Install Node.js'

trigger:
- master

pool: 'self-hosted-stas'

stages:
- stage: CI
  displayName: CI
  
  variables:
    - group: vault secrets - stage

  jobs:
  - job: Build
    displayName: Build

    steps:
    - checkout: self
    - checkout: Weight-tracker-ansible-pipeline

    # - task: Npm@0
    #   displayName: 'npm install'
    #   inputs:
    #     cwd: 'bootcamp-app'
    #     command: 'install'

    # - script: export ANSIBLE_HOST_KEY_CHECKING=False ""
      
    - task: DeleteFiles@1
      displayName: Delete non artifact files
      inputs:
        SourceFolder: 'bootcamp-app'
        Contents: |
          README.md
          .git
          docs
          .gitignore
          LICENSE
          azure-pipelines.yml
          
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/bootcamp-app'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifactName: 'drop'
        artifactType: 'pipeline'
        parallel: false

    - task: Ansible@0
      displayName: Add agents to all machines
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'Weight-tracker-ansible-pipeline/add-stage-to-pipeline.yaml'
        inventoriesAgentMachine: 'noInventory'
        args: '-e "env=stage admin_password=$(VM-password)"'


# - stage: CD_stage
#   displayName: Stage
  
#   variables: 
#   - group: vault secrets - stage

#   jobs:
#   - job: Build
#     displayName: Build



    # - script: |
    #     echo "
    #     PORT=8080
    #     HOST=0.0.0.0

    #     #postgres
    #     PGHOST=${PGHOST}
    #     PGUSERNAME=postgres
    #     PGDATABASE=postgres
    #     PGPASSWORD=${PGPASSWORD}
    #     PGPORT=5432

    #     HOST_URL=http://${HOST_URL_IP}:8080
    #     COOKIE_ENCRYPT_PWD=${COOKIE_ENCRYPT_PWD}
    #     NODE_ENV=development

    #     # Okta configuration
    #     OKTA_ORG_URL=https://dev-77800982.okta.com
    #     OKTA_CLIENT_ID=${OKTA-client-ID}
    #     OKTA_CLIENT_SECRET=${OKTA_CLIENT_SECRET}" | cat > .env
    #   displayName: '.Env creation'






# - stage: CD_stage
#   displayName: Stage
  
#   variables: 
#   - group: vault secrets - prod

#   jobs:
#   - job: Build
#     displayName: Build
    
        # - task: NodeTool@0
    #   inputs:
    #     versionSpec: '14.x'
    #   displayName: 'Install Node.js'


    # - script: |
    #     echo "
    #     PORT=8080
    #     HOST=0.0.0.0

    #     #postgres
    #     PGHOST=${PGHOST}
    #     PGUSERNAME=postgres
    #     PGDATABASE=postgres
    #     PGPASSWORD=${PGPASSWORD}
    #     PGPORT=5432

    #     HOST_URL=http://${HOST_URL_IP}:8080
    #     COOKIE_ENCRYPT_PWD=${COOKIE_ENCRYPT_PWD}
    #     NODE_ENV=development

    #     # Okta configuration
    #     OKTA_ORG_URL=https://dev-77800982.okta.com
    #     OKTA_CLIENT_ID=${OKTA-client-ID}
    #     OKTA_CLIENT_SECRET=${OKTA_CLIENT_SECRET}" | cat > .env
    #   displayName: '.Env creation'


    # - script: |
    #     npm install
    #     npm run build
    #   displayName: 'npm install and build'